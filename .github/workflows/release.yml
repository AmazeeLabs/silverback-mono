name: Release
on:
  push:
    branches:
      - development
jobs:
  release:
    name: Release
    runs-on: ubuntu-20.04
    steps:
      - name: Git mail
        run: git config --global user.email "kitt@amazee.com"

      - name: Git username
        run: git config --global user.name "K.I.T.T."

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          # We can upgrade to PHP 8 when
          # - https://github.com/mglaman/phpstan-drupal supports it
          php-version: '7.4'

      - uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSL_PRIVATE }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Read .nvmrc
        run: echo "##[set-output name=NODE_VERSION;]$(cat .nvmrc| grep -oE '[0-9]+(\.[0-9]+)?(\.[0-9]+)?' | head -1)"
        id: node_version

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "${{ steps.node_version.outputs.NODE_VERSION }}"

      - name: Get Yarn cache directory
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Get Yarn version hash
        id: yarn-version
        run: echo "::set-output name=hash::$(yarn --version | shasum | cut -d' ' -f1)"
      - name: Get Composer cache directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer global config cache-files-dir)"
      - name: Get Composer version hash
        id: composer-version
        run: |
          echo "::set-output name=hash::$(composer --version | shasum | cut -d' ' -f1)"
      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ${{ steps.yarn-cache.outputs.dir }}
            ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ steps.yarn-version.outputs.hash }}-composer-${{ steps.composer-version.outputs.hash }}-github_run_id-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ steps.yarn-version.outputs.hash }}-composer-${{ steps.composer-version.outputs.hash }}-

      - name: Create .npmrc
        run: echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}" >> .npmrc

      - name: Add auth token for 127.0.0.1
        run: echo "//127.0.0.1:4873/:_authToken=foo" >> .npmrc

      - name: Add auth token for localhost
        run: echo "//localhost:4873/:_authToken=foo" >> .npmrc

      - name: Debug npmrc
        run: cat .npmrc

      - name: Npm version
        run: npm -v

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Add drupal.org ssh key
        run: ssh-keyscan git.drupal.org >> ~/.ssh/known_hosts

      - name: Run tests
        run: yarn test

      - name: Update Drupal install cache
        run: |
          set -e
          cd apps/silverback-drupal
          source .envrc
          set -x
          composer i
          silverback setup > setup-log.txt

          UPDATES=$(cat setup-log.txt | grep -o 'Finished performing updates.' || true)
          NO_UPDATES=$(cat setup-log.txt | grep -o 'No pending updates.' || true)
          if [[ -z $UPDATES && -z $NO_UPDATES ]]
          then
            >&2 echo "Cannot get if there are pending Drupal updates."
            exit 1
          fi

          CHANGES=$(cat setup-log.txt | grep -o 'The configuration was imported successfully.' || true)
          NO_CHANGES=$(cat setup-log.txt | grep -o 'There are no changes to import.' || true)
          if [[ -z $CHANGES && -z $NO_CHANGES ]]
          then
            >&2 echo "Cannot get if there are Drupal config changes."
            exit 1
          fi

          if [[ -z $NO_UPDATES || -z $NO_CHANGES ]]
          then
            silverback setup --profile=minimal
            drush cex -y
            cd -
            git add apps/silverback-drupal/.
            git commit -m 'ci: update drupal install cache'
          fi

      - name: Build verdaccio-git
        run: yarn prepublishOnly
        working-directory: packages/npm/verdaccio-git

      - name: Start verdaccio
        run: yarn git-registry &

      - name: Wait a moment
        run: sleep 5

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn lerna publish -y
