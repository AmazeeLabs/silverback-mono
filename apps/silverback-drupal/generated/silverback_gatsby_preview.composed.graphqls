"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\Arg".
"""
directive @arg(name: String!) on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityReference".
"""
directive @resolveEntityReference(field: String!) on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityReferenceRevisions".
"""
directive @resolveEntityReferenceRevisions(field: String!) on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\Lang".
"""
directive @lang(code: String) on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\MenuItemId".
"""
directive @resolveMenuItemId on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\MenuItemLabel".
"""
directive @resolveMenuItemLabel on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\MenuItemParentId".
"""
directive @resolveMenuItemParentId on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\MenuItemUrl".
"""
directive @resolveMenuItemUrl on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\MenuItems".
"""
directive @resolveMenuItems(max_level: Int) on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "silverback_gutenberg" module.
Implemented in "Drupal\silverback_gutenberg\Plugin\GraphQL\Directive\EditorBlockChildren".
"""
directive @resolveEditorBlockChildren on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "silverback_gutenberg" module.
Implemented in "Drupal\silverback_gutenberg\Plugin\GraphQL\Directive\EditorBlockMarkup".
"""
directive @resolveEditorBlockMarkup on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "silverback_gutenberg" module.
Implemented in "Drupal\silverback_gutenberg\Plugin\GraphQL\Directive\EditorBlockMedia".
"""
directive @resolveEditorBlockMedia on FIELD_DEFINITION | UNION | INTERFACE

"""
Provided by the "silverback_gutenberg" module.
Implemented in "Drupal\silverback_gutenberg\Plugin\GraphQL\Directive\EditorBlockType".
"""
directive @resolveEditorBlockType on FIELD_DEFINITION | UNION | INTERFACE

"""
Apply all directives on the right to output on the left.
"""
directive @map on FIELD_DEFINITION

"""
Load a given entity by it's path or type and id or uuid

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityLoad".
"""
directive @loadEntity(route: String, type: String, uuid: String, id: String, operation: String) on FIELD_DEFINITION | UNION | INTERFACE

"""
Mark a type as member of a generic.
The id argument contains a string that has to match the generics resolution.
"""
directive @type(id: String!) on OBJECT

"""
Parse a gutenberg document into block data.

Provided by the "silverback_gutenberg" module.
Implemented in "Drupal\silverback_gutenberg\Plugin\GraphQL\Directive\EditorBlocks".
"""
directive @resolveEditorBlocks(path: String!, ignored: [String!], aggregated: [String!]) on FIELD_DEFINITION | UNION | INTERFACE

"""
Provide a static value as JSON string.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\Value".
"""
directive @value(json: String!) on FIELD_DEFINITION | UNION | INTERFACE

"""
Pull a specific typed-data property from an entity.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityProperty".
"""
directive @resolveProperty(path: String!) on FIELD_DEFINITION | UNION | INTERFACE

"""
Resolve a path to an Url object.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\Route".
"""
directive @route(path: String!) on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve a specific translation of an entity.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityTranslation".
"""
directive @resolveEntityTranslation(lang: String!) on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve all translations of an entity.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityTranslations".
"""
directive @resolveEntityTranslations on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve an editor block attribute.

Provided by the "silverback_gutenberg" module.
Implemented in "Drupal\silverback_gutenberg\Plugin\GraphQL\Directive\EditorBlockAttribute".
"""
directive @resolveEditorBlockAttribute(key: String!, plainText: Boolean) on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve an entities bundle.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityBundle".
"""
directive @resolveEntityBundle on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve an entities id.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityId".
"""
directive @resolveEntityId on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve an entities label.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityLabel".
"""
directive @resolveEntityLabel on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve an entities type id.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityType".
"""
directive @resolveEntityType on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve an entities url path.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityPath".
"""
directive @resolveEntityPath on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve an entities uuid.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityUuid".
"""
directive @resolveEntityUuid on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve an object or map property.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\Prop".
"""
directive @prop(key: String!) on FIELD_DEFINITION | UNION | INTERFACE

"""
Retrieve the language of an entity.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\EntityLanguage".
"""
directive @resolveEntityLanguage on FIELD_DEFINITION | UNION | INTERFACE

"""
Seek a specific element in a list.

Provided by the "graphql_directives" module.
Implemented in "Drupal\graphql_directives\Plugin\GraphQL\Directive\Seek".
"""
directive @seek(pos: Int!) on FIELD_DEFINITION | UNION | INTERFACE

schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  getRandomInt(randomInt: Int!): Int!
}

type Query

type Image @entity(type: "media", bundle: "image") {
  url: String!
  alt: String! @resolveProperty(path: "field_media_image.0.alt")
}

type Tag @entity(type: "taxonomy_term", bundle: "tag") {
  title: String! @resolveProperty(path: "name.value")
}

type Page @entity(type: "node", bundle: "page") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: String @resolveProperty(path: "field_body.0.processed")
  paragraphs: [PageParagraphs!]! @resolveEntityReferenceRevisions(field: "field_paragraphs")
}

union PageParagraphs = ParagraphText | ParagraphReferences

type ParagraphText {
  text: String @resolveProperty(path: "field_text.0.value")
}

type ParagraphReferences {
  references: [Article]! @resolveEntityReference(field: "field_references")
  singleReference: GutenbergPage @resolveEntityReference(field: "field_single_reference") @seek(pos: 0)
}

type GutenbergPage @entity(type: "node", bundle: "gutenberg_page") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: [RootBlock!]! @resolveEditorBlocks(path: "body.value", ignored: ["custom\/root", "core\/columns"])
}

type Webform @entity(type: "webform", access: false) {
  path: String! @isPath @resolveEntityPath
  url: String!
  title: String! @resolveProperty(path: "title")
}

type Article @entity(type: "node", bundle: "article") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: String @resolveProperty(path: "field_body.0.processed")
  tags: [Tag]! @resolveEntityReference(field: "field_tags")
  image: Image @resolveEntityReference(field: "field_image") @seek(pos: 0)
  template: String @isTemplate
}

union RootBlock @resolveEditorBlockType = BlockTwoColumns | BlockHtmlList | BlockHtmlParagraph | BlockHtmlQuote | BlockImage | BlockTeaser

union ContentBlock @resolveEditorBlockType = BlockHtmlList | BlockHtmlParagraph | BlockHtmlQuote | BlockImage | BlockTeaser

type BlockTwoColumns @type(id: "custom\/two-columns") {
  children: [BlockColumn!]! @resolveEditorBlockChildren
}

type BlockColumn @type(id: "core\/column") {
  children: [ContentBlock!]! @resolveEditorBlockChildren
}

type BlockHtmlParagraph @type(id: "core\/paragraph") {
  html: String! @resolveEditorBlockMarkup
}

type BlockHtmlList @type(id: "core\/list") {
  html: String! @resolveEditorBlockMarkup
}

type BlockHtmlQuote @type(id: "core\/quote") {
  html: String! @resolveEditorBlockMarkup
}

type BlockImage @type(id: "drupalmedia\/drupal-media-entity") {
  caption: String! @resolveEditorBlockAttribute(key: "caption")
  image: Image @resolveEditorBlockMedia
}

type BlockTeaser @type(id: "custom\/teaser") {
  image: Image @resolveEditorBlockMedia
  title: String! @resolveEditorBlockAttribute(key: "title")
  subtitle: String! @resolveEditorBlockAttribute(key: "subtitle")
  url: String! @resolveEditorBlockAttribute(key: "url")
}

type MenuItem {
  id: String! @resolveMenuItemId
  parent: String @resolveMenuItemParentId
  label: String! @resolveMenuItemLabel
  url: String! @resolveMenuItemUrl
}

type MainMenu @menu(menu_id: "main") {
  items: [MenuItem!]! @lang @resolveMenuItems
}

type FirstLevelMainMenu @menu(menu_id: "main", max_level: 1) {
  items: [MenuItem!]! @lang @resolveMenuItems(max_level: 1)
}

type GatsbyStringTranslation @stringTranslation(contextPrefix: "gatsby")

type Feed {
  typeName: String! @prop(key: "typeName")
  translatable: Boolean! @prop(key: "translatable")
  singleFieldName: String! @prop(key: "singleFieldName")
  listFieldName: String! @prop(key: "listFieldName")
  changes(lastBuild: Int, currentBuild: Int): [String!]! @prop(key: "changes")
  pathFieldName: String @prop(key: "pathFieldName")
  templateFieldName: String @prop(key: "templateFieldName")
}

directive @isPath on FIELD_DEFINITION

"""
DEPRECATED, use @isPath
"""
directive @path on FIELD_DEFINITION

directive @isTemplate on FIELD_DEFINITION

"""
DEPRECATED, use @isTemplate
"""
directive @template on FIELD_DEFINITION

directive @entity(type: String!, bundle: String, access: Boolean) on OBJECT

"""
Directive for the "MenuFeed" plugin.

menu_id:
  The internal menu id.

menu_ids:
  Internal menu id's. The first one the current user has access to will be
  picked.

max_level:
  The maximum level to be fetched.
  This can be used to optimizing caching. Most of the time only one or two
  levels of menus are immediately visible on the page. By declaring multiple
  types, we can generate different cache buckets, so a new menu item on a low
  level does not require a full rebuild of every page.
"""
directive @menu(menu_id: String, menu_ids: [String!], item_type: String, max_level: Int) on OBJECT

directive @stringTranslation(contextPrefix: String) on OBJECT

extend type Query {
  drupalBuildId: Int!
  drupalFeedInfo: [Feed!]!
  currentUser: User!
}

type User {
  id: String
  name: String
}

extend type Mutation {
  _original_typename: String!
}

extend type Query {
  _original_typename: String!
}

extend type Image {
  _original_typename: String!
}

extend type Tag {
  _original_typename: String!
}

extend type Page {
  _original_typename: String!
}

extend type ParagraphText {
  _original_typename: String!
}

extend type ParagraphReferences {
  _original_typename: String!
}

extend type GutenbergPage {
  _original_typename: String!
}

extend type Webform {
  _original_typename: String!
}

extend type Article {
  _original_typename: String!
}

extend type BlockTwoColumns {
  _original_typename: String!
}

extend type BlockColumn {
  _original_typename: String!
}

extend type BlockHtmlParagraph {
  _original_typename: String!
}

extend type BlockHtmlList {
  _original_typename: String!
}

extend type BlockHtmlQuote {
  _original_typename: String!
}

extend type BlockImage {
  _original_typename: String!
}

extend type BlockTeaser {
  _original_typename: String!
}

extend type MenuItem {
  _original_typename: String!
}

extend type MainMenu {
  _original_typename: String!
}

extend type FirstLevelMainMenu {
  _original_typename: String!
}

extend type GatsbyStringTranslation {
  _original_typename: String!
}

extend type Feed {
  _original_typename: String!
}

extend type Query {
  loadImage(id: String!): Image
  queryImages(offset: Int, limit: Int): [Image]!
}

extend type Image {
  id: String!
  drupalId: String!
  defaultTranslation: Boolean!
  langcode: String!
  translations: [Image!]!
}

extend type Query {
  loadImageRevision(id: String!, revision: String!): Image
}

extend type Query {
  loadTag(id: String!): Tag
  queryTags(offset: Int, limit: Int): [Tag]!
}

extend type Tag {
  id: String!
  drupalId: String!
}

extend type Query {
  loadTagRevision(id: String!, revision: String!): Tag
}

extend type Query {
  loadPage(id: String!): Page
  queryPages(offset: Int, limit: Int): [Page]!
}

extend type Page {
  id: String!
  drupalId: String!
  defaultTranslation: Boolean!
  langcode: String!
  translations: [Page!]!
}

extend type Query {
  loadPageRevision(id: String!, revision: String!): Page
}

extend type Query {
  loadGutenbergPage(id: String!): GutenbergPage
  queryGutenbergPages(offset: Int, limit: Int): [GutenbergPage]!
}

extend type GutenbergPage {
  id: String!
  drupalId: String!
  defaultTranslation: Boolean!
  langcode: String!
  translations: [GutenbergPage!]!
}

extend type Query {
  loadGutenbergPageRevision(id: String!, revision: String!): GutenbergPage
}

extend type Query {
  loadWebform(id: String!): Webform
  queryWebforms(offset: Int, limit: Int): [Webform]!
}

extend type Webform {
  id: String!
  drupalId: String!
}

extend type Query {
  loadWebformRevision(id: String!, revision: String!): Webform
}

extend type Query {
  loadArticle(id: String!): Article
  queryArticles(offset: Int, limit: Int): [Article]!
}

extend type Article {
  id: String!
  drupalId: String!
  defaultTranslation: Boolean!
  langcode: String!
  translations: [Article!]!
}

extend type Query {
  loadArticleRevision(id: String!, revision: String!): Article
}

extend type Query {
  loadMainMenu(id: String!): MainMenu
  queryMainMenus(offset: Int, limit: Int): [MainMenu]!
}

extend type MainMenu {
  id: String!
  drupalId: String!
  defaultTranslation: Boolean!
  langcode: String!
  translations: [MainMenu!]!
}

extend type Query {
  loadFirstLevelMainMenu(id: String!): FirstLevelMainMenu
  queryFirstLevelMainMenus(offset: Int, limit: Int): [FirstLevelMainMenu]!
}

extend type FirstLevelMainMenu {
  id: String!
  drupalId: String!
  defaultTranslation: Boolean!
  langcode: String!
  translations: [FirstLevelMainMenu!]!
}

extend type Query {
  loadGatsbyStringTranslation(id: String!): GatsbyStringTranslation
  queryGatsbyStringTranslations(offset: Int, limit: Int): [GatsbyStringTranslation]!
}

extend type GatsbyStringTranslation {
  id: String!
  drupalId: String!
}

extend type GatsbyStringTranslation {
  source: String!
  context: String
  translations: [GatsbyStringTranslationTranslation]
}

type GatsbyStringTranslationTranslation {
  id: String!
  source: String!
  langcode: String!
  translation: String!
}
