schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  getRandomInt(randomInt: Int!): Int!
}

type Query

type Image @entity(type: "media", bundle: "image") {
  url: String!
  alt: String! @resolveProperty(path: "field_media_image.0.alt")
}

type Tag @entity(type: "taxonomy_term", bundle: "tag") {
  title: String! @resolveProperty(path: "name.value")
}

type Page @entity(type: "node", bundle: "page") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: String @resolveProperty(path: "field_body.0.processed")
  paragraphs: [PageParagraphs!]! @resolveEntityReferenceRevisions(field: "field_paragraphs", single: false)
}

union PageParagraphs =
  | ParagraphText
  | ParagraphReferences

type ParagraphText {
  text: String @resolveProperty(path: "field_text.0.value")
}

type ParagraphReferences {
  references: [Article]! @resolveEntityReference(field: "field_references", single: false)
  singleReference: GutenbergPage @resolveEntityReference(field: "field_single_reference", single: true)
}

type GutenbergPage @entity(type: "node", bundle: "gutenberg_page") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: [RootBlock!]! @resolveEditorBlocks(path: "body.value", ignored: ["custom/root", "core/columns"])
}

type Webform @entity(type: "webform", access: false) {
  path: String! @isPath @resolveEntityPath
  url: String!
  title: String! @resolveProperty(path: "title")
}

type Article @entity(type: "node", bundle: "article") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: String @resolveProperty(path: "field_body.0.processed")
  tags: [Tag]! @resolveEntityReference(field: "field_tags", single: false)
  image: Image @resolveEntityReference(field: "field_image", single: true)
  template: String @isTemplate
}

union RootBlock @resolveEditorBlockType =
  | BlockTwoColumns
  | BlockHtmlList
  | BlockHtmlParagraph
  | BlockHtmlQuote
  | BlockImage
  | BlockTeaser

union ContentBlock @resolveEditorBlockType =
  | BlockHtmlList
  | BlockHtmlParagraph
  | BlockHtmlQuote
  | BlockImage
  | BlockTeaser

type BlockTwoColumns @type(id: "custom/two-columns") {
  children: [BlockColumn!]! @resolveEditorBlockChildren
}

type BlockColumn @type(id: "core/column") {
  children: [ContentBlock!]! @resolveEditorBlockChildren
}

type BlockHtmlParagraph @type(id: "core/paragraph") {
  html: String! @resolveEditorBlockMarkup
}

type BlockHtmlList @type(id: "core/list") {
  html: String! @resolveEditorBlockMarkup
}

type BlockHtmlQuote @type(id: "core/quote") {
  html: String! @resolveEditorBlockMarkup
}

type BlockImage @type(id: "drupalmedia/drupal-media-entity") {
  caption: String! @resolveEditorBlockAttribute(key: "caption")
  image: Image @resolveEditorBlockMedia
}

type BlockTeaser @type(id: "custom/teaser") {
  image: Image @resolveEditorBlockMedia
  title: String! @resolveEditorBlockAttribute(key: "title")
  subtitle: String! @resolveEditorBlockAttribute(key: "subtitle")
  url: String! @resolveEditorBlockAttribute(key: "url")
}


type MenuItem {
  label: String!
  url: String!
}

type MainMenu @menu(menu_id: "main", item_type: "MenuItem")

type FirstLevelMainMenu @menu(menu_id: "main", item_type: "MenuItem", max_level: 1)

type GatsbyStringTranslation @stringTranslation(contextPrefix: "gatsby")
