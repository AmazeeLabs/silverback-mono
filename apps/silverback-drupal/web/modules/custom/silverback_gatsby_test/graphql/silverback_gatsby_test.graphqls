schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  getRandomInt(randomInt: Int!): Int!
}

type Query

type Image @entity(type: "media", bundle: "image") {
  url: String!
  alt: String! @resolveProperty(path: "field_media_image.0.alt")
}

type Tag @entity(type: "taxonomy_term", bundle: "tag") {
  title: String! @resolveProperty(path: "name.value")
}

type Page @entity(type: "node", bundle: "page") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: String @resolveProperty(path: "field_body.0.processed")
  paragraphs: [PageParagraphs!]! @resolveEntityReferenceRevisions(field: "field_paragraphs", single: false)
}

union PageParagraphs =
  | ParagraphText
  | ParagraphReferences

type ParagraphText {
  text: String @resolveProperty(path: "field_text.0.value")
}

type ParagraphReferences {
  references: [Article]! @resolveEntityReference(field: "field_references", single: false)
  singleReference: GutenbergPage @resolveEntityReference(field: "field_single_reference", single: true)
}

type GutenbergPage @entity(type: "node", bundle: "gutenberg_page") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: [RootBlock!]! @resolveEditorBlocks(path: "body.value", ignore: ["custom/root", "core/columns"])
  anotherResponsiveImage(config: ResponsiveImageConfig): ResponsiveImage
}

type Webform @entity(type: "webform", access: false) {
  path: String! @isPath @resolveEntityPath
  url: String!
  title: String! @resolveProperty(path: "title")
}

type Article @entity(type: "node", bundle: "article") {
  path: String! @isPath @resolveEntityPath
  title: String! @resolveProperty(path: "title.value")
  body: String @resolveProperty(path: "field_body.0.processed")
  tags: [Tag]! @resolveEntityReference(field: "field_tags", single: false)
  image: Image @resolveEntityReference(field: "field_image", single: true)
  responsiveImage(config: ResponsiveImageConfig): ResponsiveImage
  template: String @isTemplate
}

union RootBlock = BlockTwoColumns |  BlockHtmlList | BlockHtmlParagraph | BlockHtmlQuote | BlockImage | BlockTeaser

union ContentBlock = BlockHtmlList | BlockHtmlParagraph | BlockHtmlQuote | BlockImage | BlockTeaser

type BlockTwoColumns @editorBlock(type: "custom/two-columns") {
  children: [BlockColumn!]! @resolveEditorBlockAttribute(name: "children")
}

type BlockColumn @editorBlock(type: "core/column") {
  children: [ContentBlock!]! @resolveEditorBlockAttribute(name: "children")
}

type BlockHtmlParagraph @editorBlock(type: "core/paragraph") {
  html: String! @resolveEditorBlockAttribute(name: "markup")
}

type BlockHtmlList @editorBlock(type: "core/list") {
  html: String! @resolveEditorBlockAttribute(name: "markup")
}

type BlockHtmlQuote @editorBlock(type: "core/quote") {
  html: String! @resolveEditorBlockAttribute(name: "markup")
}

type BlockImage @editorBlock(type: "drupalmedia/drupal-media-entity") {
  caption: String! @resolveEditorBlockAttribute(name: "caption")
  image: Image @resolveEditorBlockAttribute(name: "media")
}

type BlockTeaser @editorBlock(type: "custom/teaser") {
  image: Image @resolveEditorBlockAttribute(name: "media")
  title: String! @resolveEditorBlockAttribute(name: "title")
  subtitle: String! @resolveEditorBlockAttribute(name: "subtitle")
  url: String! @resolveEditorBlockAttribute(name: "url")
}


type MenuItem {
  label: String!
  url: String!
}

type MainMenu @menu(menu_id: "main", item_type: "MenuItem")

type FirstLevelMainMenu @menu(menu_id: "main", item_type: "MenuItem", max_level: 1)

type GatsbyStringTranslation @stringTranslation(contextPrefix: "gatsby")
