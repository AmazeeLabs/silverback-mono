<?php

use Drupal\Core\Url;

/**
 * Retrieve the url publisher is available at.
 * Defaults to http://localhost:8000.
 *
 * @return string
 */
function publisher_url() {
  return getenv('PUBLISHER_URL') ?: 'http://localhost:8000';
}

/**
 * Implements hook_library_info_build().
 */
function silverback_publisher_monitor_library_info_build() {
  $url = publisher_url();
  return [
    'indicator' => [
      'js' => [
        "$url/___status/elements.js" => ['type' => 'external'],
      ],
      'css' => [
        'theme' => [
          'css/indicator.css' => [],
        ],
      ],
    ],
  ];
}

function silverback_publisher_monitor_page_attachments(&$variables) {
  $variables['#attached']['library'][] = 'silverback_publisher_monitor/indicator';
}

/**
 * Implements hook_toolbar().
 */
function silverback_publisher_monitor_toolbar() {
  $items = [];

  $statusElement = [
    '#type' => 'html_tag',
    '#tag' => 'publisher-status',
    '#cache' => [
      'max-age' => 0,
    ],
    '#attributes' => [
      'class' => 'toolbar-item',
      'url' => publisher_url(),
      'labelStarting' => t('Starting build'),
      'labelReady' => t('Website is up-to-date'),
      'labelError' => t('Fatal Error'),
      'labelUpdating' => t('Website is updating'),
    ],
  ];

  $buildLink = [
    '#type' => 'link',
    '#title' => t('Queue Gatsby build'),
    '#url' => Url::fromRoute('silverback_gatsby.build'),
    '#options' => [
      'attributes' => [
        'class' => ['use-ajax'],
      ],
    ],
  ];

  $logsLink = [
    '#type' => 'link',
    '#title' => t('Publisher logs'),
    '#url' => Url::fromUri(publisher_url() . '/___status'),
    '#options' => [
      'attributes' => [
        'target' => '_blank',
      ],
    ],
  ];

  $dropButton = [
    '#type' => 'dropbutton',
    '#dropbutton_type' => 'small',
    '#links' => [
      'status' => [
        // Placeholder to render html_tag element.
        // Could be replaced by a websocker integration with Drupal
        // instead of getting the status element from Publisher.
        'title' => $statusElement,
      ],
      // Default #links children does not support options,
      // so prepare a link render array and use the title
      // as a placeholder.
      // We could do some more advanced overrides or introduce
      // a new type that extends dropbutton, but keeping
      // it simple for now.
      'build' => [
        'title' => $buildLink,
      ],
      'logs' => [
        'title' => $logsLink,
      ],
    ],
  ];

  $items['silverback_publisher_monitor'] = [
    '#type' => 'toolbar_item',
    'tab' => $dropButton,
    '#wrapper_attributes' => [
      'class' => ['silverback-publisher-indicator-tab'],
    ],
    '#weight' => 2000,
  ];

  return $items;
}
