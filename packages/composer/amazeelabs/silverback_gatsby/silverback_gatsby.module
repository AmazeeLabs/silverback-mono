<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\silverback_gatsby\Plugin\Gatsby\Feed\EntityFeed;
use Drupal\user\UserInterface;


function _silverback_gatsby_entity_event(EntityInterface $entity) {
  \Drupal::service('silverback_gatsby.update_handler')->handle(EntityFeed::class, $entity);
}

/**
 * Implements hook_entity_create().
 */
function silverback_gatsby_entity_insert(EntityInterface $entity) {
  _silverback_gatsby_entity_event($entity);
}

/**
 * Implements hook_entity_presave().
 */
function silverback_gatsby_entity_presave(EntityInterface $entity) {
  if (!empty($entity->original)) {
    _silverback_gatsby_entity_event($entity->original);
  }
}

/**
 * Implements hook_entity_update().
 */
function silverback_gatsby_entity_update(EntityInterface $entity) {
  \Drupal::entityTypeManager()
    ->getAccessControlHandler($entity->getEntityTypeId())
    ->resetCache();
  _silverback_gatsby_entity_event($entity);
}

/**
 * Implements hook_entity_delete().
 */
function silverback_gatsby_entity_delete(EntityInterface $entity) {
  _silverback_gatsby_entity_event($entity);
}

/**
 * Implements hook_entity_type_alter().
 */
function silverback_gatsby_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  foreach ($entity_types as $entity_type) {
    if ($entity_type->id() === 'graphql_server') {
      if (!$entity_type->hasHandlerClass('build')) {
        $entity_type->setHandlerClass(
          'build',
          Drupal\silverback_gatsby\GraphQL\Build::class
        );
      }
      if (!$entity_type->getFormClass('build')) {
        $entity_type->setFormClass(
          'build',
          Drupal\silverback_gatsby\GraphQL\Build::class
        );
      }
    }
  }
}

/**
 * Implements hook_user_login().
 */
function silverback_gatsby_user_login(UserInterface $account) {
  // Write a javascript-accessible cookie that tells the frontend if the user is
  // authenticated, so it can make additional requests based on that information.
  $opts = \Drupal::getContainer()->getParameter('session.storage.options');
  if (isset($opts['cookie_domain'])) {
    setcookie('drupal_user', $account->id(), 0, '/', $opts['cookie_domain'], false, false);
  }
}
