directive @unknown on FIELD_DEFINITION

type Query {
  primitiveString: String! @value(string: "foo")
  primitiveInt: Int! @value(int: 42)
  primitiveFloat: Float! @value(float: 3.14)
  primitiveBoolean: Boolean! @value(boolean: true)
  foo: String! @value(json: "\"bar\"")
  bar: String @unknown
  seek: String! @value(json: "[\"one\", \"two\"]") @seek(pos: 1)
  prop: String! @value(json: "{\"foo\": \"bar\"}") @prop(key: "foo")
  map: [String!]!
    @value(json: "[{\"x\": \"a\"},{\"x\": \"b\"}]")
    @map
    @prop(key: "x")
  union: [TestUnion]!
    @value(
      json: "[{\"type\": \"a\", \"y\":\"A\"},{\"type\": \"b\", \"z\":\"B\"}]"
    )
  interface: [TestInterface]!
    @value(
      json: "[{\"type\": \"a\", \"y\":\"A\"},{\"type\": \"b\", \"z\":\"B\"}]"
    )
}

union TestUnion @prop(key: "type") = A | B

interface TestInterface @prop(key: "type") {
  type: String!
}

type A implements TestInterface @type(id: "a") {
  type: String! @prop(key: "type")
  y: String! @prop(key: "y")
}

type B implements TestInterface @type(id: "b") {
  type: String! @prop(key: "type")
  z: String! @prop(key: "z")
}

type Article @test_directable {
  title: String! @prop(key: "title")
}
