<?php

namespace Drupal\graphql_directives\Plugin\GraphQL\Directive;

use Drupal\Core\Plugin\PluginBase;
use Drupal\graphql\GraphQL\Resolver\ResolverInterface;
use Drupal\graphql\GraphQL\ResolverBuilder;
use Drupal\graphql_directives\DirectiveInterface;

/**
 * @Directive(
 *   id = "loadEntity",
 *   description = "Load a given entity by it's path or type and id or uuid",
 *   arguments = {
 *     "route" = "String",
 *     "type" = "String",
 *     "uuid" = "String",
 *     "id" = "String",
 *     "operation" = "String"
 *   }
 * )
 */
class EntityLoad extends PluginBase implements DirectiveInterface {
  use ArgumentTrait;

  /**
   * {@inheritDoc}
   * @throws \Exception
   */
  public function buildResolver(ResolverBuilder $builder, array $arguments): ResolverInterface {
    // If there is no id or uuid argument, we assume that there is a parent value
    // of type url (generated by the @route directive) and we use that to load
    // the entity from.
    if (!isset($arguments['uuid']) && !isset($arguments['id'])) {
      return $builder->produce('route_entity')
        ->map('url', $builder->fromParent());
    }

    // All other cases require a "type" argument.
    if (!isset($arguments['type'])) {
      throw new \Exception('A type must be provided.');
    }

    if (isset($arguments['uuid'])) {
      return $builder->produce('entity_load_by_uuid')
        ->map('type', $builder->fromValue($arguments['type']))
        ->map('access_operation', $builder->fromValue($arguments['operation'] ?? 'view'))
        ->map('uuid', $this->argumentResolver($arguments['uuid'], $builder));
    }
    else {
      return $builder->produce('entity_load')
        ->map('type', $builder->fromValue($arguments['type']))
        ->map('access_operation', $builder->fromValue($arguments['operation'] ?? 'view'))
        ->map('id', $this->argumentResolver($arguments['id'], $builder));
    }
  }

}
