#!/usr/bin/env bash
set -e

git config --global user.email "you@example.com"
git config --global user.name "Your Name"

BASEDIR="$( cd "$(dirname "$0")" > /dev/null 2>&1 ; pwd -P )"

function _cleanup {
  cd "$BASEDIR"
  set +e
  GIT_DAEMON_PID="$(lsof -t -i:9418)"
  VERDACCIO_DAEMON_PID="$(lsof -t -i:4873)"
  set -e
  if [ -n "$GIT_DAEMON_PID" ]; then
    echo "Killing git daemon $GIT_DAEMON_PID"
    kill "$GIT_DAEMON_PID" || true
  fi
  if [ -n "$VERDACCIO_DAEMON_PID" ]; then
    echo "Killing verdaccio daemon $VERDACCIO_DAEMON_PID"
    kill "$VERDACCIO_DAEMON_PID" || true
  fi
  if [ -d .test ]; then
    rm -rf .test
  fi
}

_cleanup

mkdir .test
mkdir .test/packages
mkdir .test/remote

git init --bare .test/remote/test.git

function retry {
  local n=1
  local max=5
  local delay=1
  while true; do
    "$@" && break || {
      if [[ $n -lt $max ]]; then
        ((n++))
        sleep $delay;
      else
        _cleanup
        exit 1
      fi
    }
  done
}

echo "starting local git daemon"
git daemon --verbose --export-all --base-path="$BASEDIR/.test/remote" --reuseaddr --enable=receive-pack &
retry nc -z 127.0.0.1 9418
echo "git daemon operational"

git clone git://127.0.0.1:9418/test.git .test/packages/test
cd "$BASEDIR/.test/packages/test"
echo "{\"name\": \"test\", \"version\": \"1.0.0\", \"publishConfig\": {\"repository\": \"git://localhost:9418/test.git\", \"branch\": \"master\"}}" >> package.json
git add package.json
echo "{}" >> composer.json
git add composer.json
echo "README" >> README.md
git add README.md
echo "foo=bar" >> .env
git add .env
git commit -m "Initial commit"
git push origin master
cd "$BASEDIR"
rm -rf .test/packages/test

cd "$BASEDIR"

yarn verdaccio -c config.yml &

retry curl --silent --head http://localhost:4873
echo "Verdaccio operational"

echo "Cloning module"
cd "$BASEDIR/.test/packages"
git clone git://127.0.0.1:9418/test.git

cd test

if [ "$(jq -r .version < package.json)" == '1.0.0' ]; then
 echo "Initial module version correct."
else
 echo "Initial module version incorrect."
 exit 1
fi


echo "Bumping module version"
npm version patch
if [ "$(jq -r .version < package.json)" == '1.0.1' ]; then
 echo "Bumped module version correct."
else
 echo "Bumped module version incorrect."
 exit 1
fi

echo "Removing file"
rm README.md

echo "Changing dotfile"
echo "foo=baz" > .env

echo "Publishing module"
npm publish --registry http://127.0.0.1:4873

echo "Cloning module"
cd "$BASEDIR/.test/packages"
git clone git://127.0.0.1:9418/test.git foo
cd foo

if [ "$(jq -r .version < package.json)" == '1.0.1' ]; then
  echo "Updated module version correct."
else
  echo "Updated module version incorrect."
  exit 1
fi

if [ "$(jq -r .version < composer.json)" == '1.0.1' ]; then
  echo "Updated composer version correct."
else
  echo "Updated composer version incorrect."
  exit 1
fi

if [ ! -f README.md ]; then
  echo "README.md was removed"
else
  echo "README.md was not removed"
  exit 1
fi

if [ "$(cat .env)" == 'foo=baz' ]; then
  echo "Dotfile content correct."
else
  echo "Dotfile content incorrect: $(cat .env)}"
  exit 1
fi

if [ "$(git tag)" == '1.0.1' ]; then
  echo "Module tag correct."
else
  echo "Module tag incorrect."
  exit 1
fi

if [ "$(git log -n 1 --format=%B)" == 'chore: release version 1.0.1' ]; then
  echo "Commit message correct."
else
  echo "Commit message incorrect."
  exit 1
fi

echo "============================================================"
echo "All good!"
echo "============================================================"

_cleanup
exit 0
